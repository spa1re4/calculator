 
#include <iostream>
#include <string>
#include <stack>
#include <cmath>

using namespace std;

// Определение функции precedence
int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/' || op == '%') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

// Функция для преобразования инфиксного выражения в постфиксное
string infixToPostfix(const string& expression) {
    string output; // Вывод результатов
    stack<char> operators; // Стек для хранения операторов

    for (char c : expression) {
       
        if (isdigit(c) || c == '.') {
            output += c;
        } else if (c == '(') {
            operators.push(c);
        } else if (c == ')') {
            // Пока верхний элемент стека не является открывающей скобкой, извлекаем операторы в выходную строку
            while (!operators.empty() && operators.top() != '(') {
                output += operators.top();
                operators.pop();
            }
            operators.pop(); // Удаляем открывающую скобку из стека
        } else {
            // Пока стек не пуст и приоритет текущего оператора меньше или равен приоритету оператора на вершине стека
            while (!operators.empty() && precedence(operators.top()) >= precedence(c)) {
                // Помещаем оператор на вершине стека в выходную строку
                output += operators.top();
                // Удаляем оператор из стека
                operators.pop();
            }
            // Добавляем текущий оператор в стек
            operators.push(c);
        }
    }

    // Извлекаем оставшиеся операторы из стека и добавляем их в выходную строку
    while (!operators.empty()) {
        output += operators.top();
        operators.pop();
    }

    return output; // Возвращаем постфиксное выражение
}

// Функция для вычисления постфиксного выражения
double evaluatePostfix(const string& postfix) {
    stack<double> operands; // Стек для хранения операндов

    // Перебор каждого символа в постфиксном выражении
    for (char c : postfix) {
        // Если символ - операнд (цифра или точка), преобразуем его в число и помещаем в стек операндов
        if (isdigit(c) || c == '.') {
            operands.push(c - '0');
        } else { // Если символ - оператор
            double b = operands.top(); operands.pop(); 
            double a = operands.top(); operands.pop(); 
           
            switch (c) {
                case '+': operands.push(a + b); break;
                case '-': operands.push(a - b); break;
                case '*': operands.push(a * b); break;
                case '/': 
                    if (b == 0) throw "Error: Division by zero!";
                    operands.push(a / b); 
                    break;
                case '%': 
                    if (b == 0) throw "Error: Division by zero!";
                    operands.push(fmod(a, b)); 
                    break;
                case '^': operands.push(pow(a, b)); break;
            }
        }
    }

    return operands.top(); // Возвращаем результат вычисления
}

// Основная функция программы
int main() {
    while (true) {
        cout << "Enter expression (or 'exit' to quit): ";
        string expression;
        getline(cin, expression);
        if (expression == "exit") break; // Проверка на выход из программы
        try {
            double result = evaluatePostfix(infixToPostfix(expression)); // Преобразование и вычисление результата
            cout << "Result: " << result << endl; 
        } catch (const char* message) {
            cout << message << endl;
        }
    }
    return 0;
}
